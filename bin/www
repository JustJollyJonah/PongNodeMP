#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodepongattempt2:server');
var http = require('http').Server(app);
var io = require('socket.io')(http);
var game = require('../public/javascripts/gamecore');
var UUID = require('uuid');

io.on('connection', onConnection);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http;

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
//Als er verbonden is met een socket
function onConnection(socket) {
    console.log("user connected via websocket");
    socket.userid = UUID();
    //Geef succesvolle verbinding door
    socket.emit("connected", {id: socket.userid});
    //Luister naar join event
    socket.on('join', function (data) {
        console.log("join received");
        var roomnumber = parseInt(data.roomnumber);
        var username = data.username;
        var playernumber;
        var id = socket.id;
        var newgame = new game.Room(roomnumber);
        var current_game;
        var found = false;
        var index = 0;
        for (var i = 0; i < game.game.rooms.length; i++) {
            if (game.game.rooms[i].roomnumber == roomnumber) {
                found = true;
                index = i;
                break;
            }
        }
        if (!found) {
            newgame.addPlayer(username, id);
            game.game.rooms.push(newgame);
            current_game = game.game.rooms[game.game.rooms.indexOf(newgame)];
            console.log(current_game);
            game.game.users.push(username);
            socket.username = username;
            playernumber = 1;
            console.log("send");
            socket.emit('login', {status: "host", game: game.game.rooms[game.game.rooms.indexOf(newgame)], player: playernumber})
        } else {
            if(game.game.rooms[index].players.length < 2) {
                game.game.users.push(username);
                var playercount = game.game.rooms[index].players.length;
                game.game.rooms[index].addPlayer(username, socket.id);
                current_game = game.game.rooms[index];
                if (playercount == 0) {
                    playernumber = 1;
                } else {
                    playernumber = 2;
                    emitJoinToRoom(game.game.rooms[index]);
                }
                console.log("send");
                socket.username = username;
                socket.emit('login', {status: 'joined', game: game.game.rooms[index], player: playernumber});
                socket.emit("roomcheck", false);
            }
            else {

                socket.emit('roomcheck', true);
            }
        }
        socket.on("start", function (data) {
            var current_room = game.game.rooms.filter(function (item) {
                if (item.roomnumber == data.roomnumber) {
                    return item;
                }
            });
            if (current_room[0].players.length == 2) {
                current_room[0].startGame();
                emitStartedToRoom(current_room[0])
            }


        });
        socket.on('input', function(data) {
            if(data.localGame.localinstance.started){
                var current_room = game.game.rooms.filter(function (item) {
                    if (item.roomnumber == data.localGame.roomnumber) {
                        return item;
                    }
                });
            HandleInput(data.currentY, playernumber, current_room[0]);
            }
        });
        socket.on('disconnect', function(data) {
            current_game.removePlayer(socket.id);
            emitDisconnectToRoom(current_game);
        })



    });

    function emitStartedToRoom(room) {
      room.players.forEach(function(item, index) {

        io.to(item.id).emit("started", room);

      })
    }
    function emitDisconnectToRoom(room) {
        room.players.forEach(function(item, index) {

            io.to(item.id).emit("user_disconnect", room);

        })
    }
    function emitJoinToRoom(room) {
        room.players.forEach(function(item, index) {

            io.to(item.id).emit("playerjoined", room);

        })
    }
}

setInterval(updatePhysics, 15);


function updatePhysics() {
    game.game.startedRooms.forEach(function(item, index) {
        syncGame(item);
        item.updatePhysics();

    })


}
function syncGame(game) {
    game.players.forEach(function(item, index) {
        io.to(item.id).emit('update',game.localinstance)
    })
}


function HandleInput(y, playernumber, room) {
    var direction;
    var yLocal;

    if(playernumber == 1) {
        if(room.localinstance.player1.posy - (y-40) > 3 || room.localinstance.player1.posy - (y-40) < -3) {
        if(room.localinstance.player1.posy > y - 40) {
            direction = "-";
            yLocal = y;
            room.localinstance.handleInput(direction, yLocal,playernumber);

        } else if(room.localinstance.player1.posy == y - 40) {
            //ignore the input
        } else {
            direction = "+";
            yLocal = y;
            room.localinstance.handleInput(direction, yLocal, playernumber);
        }
        }
    } else {
        if(room.localinstance.player2.posy - (y-40) > 3 || room.localinstance.player2.posy - (y-40) < -3) {
        if(room.localinstance.player2.posy > y - 40) {
            direction = "-";
            yLocal = y;
            room.localinstance.handleInput(direction, yLocal, playernumber);
        } else if(room.localinstance.player2.posy == y - 40) {
            //ignore the input
        } else {
            direction = "+";
            yLocal = y;
            room.localinstance.handleInput(direction, yLocal, playernumber);
        }
        }
    }
}